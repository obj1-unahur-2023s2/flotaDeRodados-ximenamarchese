import rodados.*
import dependencias.*

describe "Test de Dependencias"{
	const deportes = new Dependencia(cantidadEmpleado=45)
	const cultura = new Dependencia(cantidadEmpleado=31)
	
	method initialize(){
	const cachito = new Corsa(color="rojo")
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(new Corsa(color="azul"))
	deportes.agregarAFlota(new Corsa(color="verde"))
	deportes.agregarAFlota(new Renault(conTanqueAdicional = true))
	deportes.agregarAFlota(new AutosEspeciales(capacidad=5, velocidad=160, peso=1200, color="beige"))
	
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(new Renault(conTanqueAdicional = true))
	cultura.agregarAFlota(new Renault(conTanqueAdicional = true))
	cultura.agregarAFlota(new Renault())
	trafic.configurar(interiorPopular, motorBataton)
	cultura.agregarAFlota(trafic)	
	}
	
	test "peso total de la flota de deporte"{
		assert.equals(1300*3+1350+1200, deportes.pesoTotalFlota())
	}
	
	test "peso total de la flota de cultura"{
		assert.equals(1300+1350*2+1200+5500, cultura.pesoTotalFlota())
	}
	
	test "estan bien equipadas de deporte"{
		assert.that(deportes.estaBienEquipada())
	}
	
	test "no estan bien equipadas de cultura"{
		assert.notThat(cultura.estaBienEquipada())		
	}
	
	test "capacidad total de deporte en color azul"{
		assert.equals(7, deportes.capacidadTotalEnColor("azul"))
	}
	
	test "capacidad total de cultura en color azul"{
		assert.equals(10, cultura.capacidadTotalEnColor("azul"))
	}
	
	test "capacidad faltante de cultura"{
		assert.equals(5, cultura.capacidadFaltante())
	}
	
	test "capacidad faltante de deporte"{
		assert.equals(25, deportes.capacidadFaltante())
	}
}